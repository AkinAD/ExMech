#BlueJ class context
comment0.params=brailleCellNumber\ jButtonNumber
comment0.target=Simulator(int,\ int)
comment0.text=\n\ Creates\ and\ displays\ a\ window\ with\ <code>brailleCellNumber</code>\n\ Braille\ cells\ and\ <code>jButtonNumber</code>\ buttons.\ The\ two\ parameters\ must\ be\n\ positive\ integers.\n\ \n\ @param\ brailleCellNumber\n\ \ \ \ \ \ \ \ \ \ \ \ the\ number\ of\ braille\ cells\ the\ Simulator\ should\ have\n\ @param\ jButtonNumber\n\ \ \ \ \ \ \ \ \ \ \ \ the\ number\ of\ buttons\ the\ Simulator\ should\ have\n\ @throws\ IllegalArgumentException\n\ \ \ \ \ \ \ \ \ \ \ \ \ if\ one\ or\ both\ of\ the\ two\ parameters\ is\ negative\ or\ 0\n
comment1.params=index
comment1.target=javax.swing.JButton\ getButton(int)
comment1.text=\n\ Returns\ a\ reference\ to\ the\ button\ at\ the\ index\ passed\ as\ argument.\n\ The\ main\ purpose\ of\ providing\ this\ method\ is\ so\ the\ client\ can\ add\n\ actionListeners\ to\ the\ button.\n\ Buttons\ are\ numbered\ from\ left\ to\ right\ as\ they\ appear\ in\ the\ frame,\ from\n\ 0\ to\ (jButtonNumber-1),\ jButtonNumber\ being\ the\ number\ of\ buttons\n\ initialized\ by\ the\ constructor.\ \n\ \n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ the\ index\ of\ the\ button\ to\ be\ returned\n\ @return\ reference\ to\ the\ JButton\ object\ at\ the\ index\ passed\ as\ argument\n\ @throws\ IllegalArgumentException\n\ \ \ \ \ \ \ \ \ \ \ \ \ if\ the\ index\ is\ negative\ or\ equal\ to\ or\ bigger\ than\n\ \ \ \ \ \ \ \ \ \ \ \ \ jButtonNumber\ (the\ number\ of\ buttons\ initialized)\n
comment2.params=index
comment2.target=BrailleCell\ getCell(int)
comment2.text=\n\ Returns\ a\ reference\ to\ the\ BrailleCell\ object\ at\ the\ index\ passed\ as\n\ argument.\ Braille\ Cells\ are\ numbered\ left\ to\ right\ and\ top\ to\ bottom\ as\n\ they\ appear\ in\ the\ frame,\ from\ 0\ to\ (brailleCellNumber\ -\ 1),\n\ brailleCellNumber\ being\ the\ number\ of\ BrailleCell\ objects\ initialized\ by\n\ the\ constructor.\n\ \n\ \n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ the\ index\ of\ the\ BrailleCell\ object\ whose\ reference\ is\ to\ be\n\ \ \ \ \ \ \ \ \ \ \ \ returned\n\ @return\ reference\ to\ the\ BrailleCell\ object\ at\ the\ index\ passed\ as\n\ \ \ \ \ \ \ \ \ argument\n\ @throws\ IllegalArgumentException\n\ \ \ \ \ \ \ \ \ \ \ \ \ if\ the\ index\ is\ negative\ or\ equal\ to\ or\ bigger\ than\n\ \ \ \ \ \ \ \ \ \ \ \ \ brailleCellNumber\ (the\ number\ of\ Braille\ Cells\ initialized)\n
comment3.params=
comment3.target=void\ clearAllCells()
comment3.text=\n\ Clears\ all\ the\ Braille\ Cells,\ i.e\ lowers\ all\ the\ pins\ for\ all\ of\ them,\n\ effectively\ making\ them\ display\ nothing.\n
comment4.params=index
comment4.target=Buttons\ getHardwareButton(int)
comment5.params=aString
comment5.target=void\ displayString(java.lang.String)
comment5.text=\n\ Displays\ the\ string\ passed\ as\ argument\ on\ all\ the\ Braille\ Cells\n\ If\ the\ string\ is\ shorter\ than\ the\ total\ number\ of\ Braille\ Cells,\ the\n\ remaining\ cells\ are\ cleared.\ However,\ if\ the\ string\ is\ longer\ it\ only\ displays\n\ the\ part\ of\ it\ up\ to\ however\ many\ Braille\ Cells\ there\ are\ and\ ignores\ the\n\ rest.\n\ \n\ @param\ aString\n\ \ \ \ \ \ \ \ \ \ \ \ the\ String\ to\ be\ displayed\ on\ the\ Braille\ Cells\n
numComments=6
